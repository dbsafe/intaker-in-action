<div class="space-10 mat-subtitle2">@Tittle</div>
<MatDivider></MatDivider>

@if (_rows.Count() == 0)
{
    <div class="space-10 mat-subtitle4">None</div>
}
else
{
    <div class="mat-layout-grid-inner">
        <div class="space-10 mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <div id="@Id"></div>
        </div>
    </div>
}

@code {
    private TabulatorManager20 _tabulatorManager;

    private List<DataRow20> _rows;

    [Inject]
    public IJSRuntime JS { get; set; }

    [Inject]
    public IMatToaster Toaster { get; set; }

    [Parameter]
    public string Tittle { get; set; }

    [Parameter]
    public string Id { get; set; }


    [Parameter]
    public IEnumerable<DataRow20> Rows
    {
        get { return _rows; }
        set { _rows = value.ToList(); }
    }

    [Parameter]
    public Datas DataRowsDefinition { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && _rows.Count() > 0)
        {
            try
            {
                _tabulatorManager = TabulatorManager20.InitDecodedRows(JS, $"#{Id}", _rows, DataRowsDefinition);
            }
            catch (Exception ex)
            {
                Toaster.Add(ex.Message, MatToastType.Danger);
            }
        }
    }
}
