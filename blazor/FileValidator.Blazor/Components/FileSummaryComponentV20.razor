<div class="mat-subtitle2">Summary</div>
<MatDivider></MatDivider>

<div class="mat-layout-grid-inner">
    <div class="file-summary mat-layout-grid-cell mat-layout-grid-cell-span-6">
        <div class="mat-body2"><strong>Validation Result: </strong>@_model.ValidationResult</div>
        <div class="mat-body2"><strong>Data rows: </strong>@_model.DataRowCount</div>
        <div class="mat-body2"><strong>Decoded data rows: </strong>@_model.DecodedDataRowCount</div>
        <div class="mat-body2"><strong>Undecoded data rows: </strong>@_model.UndecodedDataRowCount</div>
        <div class="mat-body2"><strong>Invalid data rows: </strong>@_model.InvalidDataRowCount</div>
    </div>

    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
        @if (_model.FileHasErrors)
        {
            <div class="mat-body2"><strong>Errors:</strong></div>
            @foreach (var error in _model.Errors)
            {
                <div style="margin-left:20px" class="mat-body2">@error</div>
            }
        }
    </div>
</div>

@code {
    private Model _model = new Model();
    private ParsedDataAndSpec20 _parsedDataAndSpec;

    [Parameter]
    public ParsedDataAndSpec20 ParsedDataAndSpec
    {
        get
        {
            return _parsedDataAndSpec;
        }
        set
        {
            _parsedDataAndSpec = value;
            if (_parsedDataAndSpec != null)
            {
                SetPrivateProperties();
            }
            else
            {
                Clear();
            }
        }
    }

    private void SetPrivateProperties()
    {
        _model.FileHasErrors = _parsedDataAndSpec.ParsedData.Errors.Count > 0;
        _model.Errors = _parsedDataAndSpec.ParsedData.Errors;
        _model.DataRowCount = _parsedDataAndSpec.ParsedData.DataRows.Count;
        _model.InvalidDataRowCount = _parsedDataAndSpec.ParsedData.InvalidDataRows.Count;
        _model.ValidationResult = _parsedDataAndSpec.ParsedData.ValidationResult.ToString();
        _model.DecodedDataRowCount = _parsedDataAndSpec.ParsedData.DecodedDataRows.Count;
        _model.UndecodedDataRowCount = _parsedDataAndSpec.ParsedData.UndecodedDataRows.Count;
    }

    private void Clear()
    {
        _model = new Model();
    }

    private class Model
    {
        public bool FileHasErrors { get; set; }
        public int DataRowCount { get; set; }
        public int InvalidDataRowCount { get; set; }
        public string ValidationResult { get; set; }
        public IEnumerable<string> Errors { get; set; }
        public int DecodedDataRowCount { get; set; }
        public int UndecodedDataRowCount { get; set; }
    }
}
